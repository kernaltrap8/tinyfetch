#!/bin/bash
set -euo pipefail

# gen_ascii.sh - Generate ASCII art for remaining letters
# This program comes with ABSOLUTELY NO WARRANTY
# This is free software, and you are welcome to redistribute it
# under certain conditions

# Part of tinyfetch project

START_LETTER="a"
END_LETTER="z"
SPECIFIC_LETTERS=""

# Output function
output_line() { echo "$1"; }

# Check figlet
if ! command -v figlet &> /dev/null; then
    echo "Error: figlet is not installed." >&2
    exit 1
fi

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --range)
            if [[ $# -lt 2 ]]; then
                echo "Error: --range requires an argument" >&2
                exit 1
            fi
            if [[ $2 =~ ^[a-zA-Z]-[a-zA-Z]$ ]]; then
                START_LETTER="${2:0:1}"
                END_LETTER="${2:2:1}"
                shift 2
            else
                echo "Error: Invalid range format. Use 'a-z' or 'A-Z'" >&2
                exit 1
            fi
            ;;
        --letters)
            if [[ $# -lt 2 ]]; then
                echo "Error: --letters requires an argument" >&2
                exit 1
            fi
            SPECIFIC_LETTERS="$2"
            shift 2
            ;;
        -h|--help)
            echo "Usage: $0 [OPTIONS]"
            exit 0
            ;;
        *)
            echo "Unknown option: $1" >&2
            exit 1
            ;;
    esac
done

# Generate ASCII art for a letter
generate_letter() {
    local letter="$1"
    mapfile -t lines < <(figlet "$letter")
    for i in {1..9}; do
        if [ $((i-1)) -lt ${#lines[@]} ]; then
            line="${lines[$((i-1))]}"
            line=${line//\\/\\\\}
            line=${line//\"/\\\"}
            line=$(printf "%-12.12s" "$line")
        else
            line="            "
        fi
        output_line "char *${letter}_p${i} = \"${line}\";"
    done
    output_line ""
}

# Function to generate letters from a range
generate_range() {
    local start="$1"
    local end="$2"

    # Convert to ASCII codes
    local start_code
    local end_code
    start_code=$(printf "%d" "'$start")
    end_code=$(printf "%d" "'$end")

    # Swap if needed
    if (( start_code > end_code )); then
        local tmp=$start_code
        start_code=$end_code
        end_code=$tmp
    fi

    for ((c=start_code; c<=end_code; c++)); do
        letter=$(printf "\\$(printf '%03o' "$c")")
        # Only generate letters
        [[ "$letter" =~ [a-zA-Z] ]] && generate_letter "$letter"
    done
}

# Generate header
output_line "// tinyfetch Copyright (C) 2024 kernaltrap8"
output_line "// This program comes with ABSOLUTELY NO WARRANTY"
output_line "// This is free software, and you are welcome to redistribute it"
output_line "// under certain conditions"
output_line ""
output_line "/*"
output_line "    tinyascii.h"
output_line "*/"
output_line ""
output_line "// ASCII art for distros"
output_line "// art generated using figlet: http://www.figlet.org/"
output_line ""
output_line "// Auto-generated by gen_ascii.sh"
output_line "// Do not edit manually"
output_line ""
output_line "int ascii_enable = 0;"
output_line "char *tinyascii_p1;"
output_line "char *tinyascii_p2;"
output_line "char *tinyascii_p3;"
output_line "char *tinyascii_p4;"
output_line "char *tinyascii_p5;"
output_line "char *tinyascii_p6;"
output_line "char *tinyascii_p7;"
output_line "char *tinyascii_p8;"
output_line "char *tinyascii_p9;"
output_line ""

# Generate letters
if [ -n "$SPECIFIC_LETTERS" ]; then
    for ((i=0;i<${#SPECIFIC_LETTERS};i++)); do
        l="${SPECIFIC_LETTERS:$i:1}"
        [[ "$l" =~ [a-zA-Z] ]] && generate_letter "$l"
    done
else
    generate_range "$START_LETTER" "$END_LETTER"
fi
